(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{104:function(e,n,t){"use strict";t.d(n,"a",(function(){return l})),t.d(n,"b",(function(){return f}));var r=t(0),o=t.n(r);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function c(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?c(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):c(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var p=o.a.createContext({}),u=function(e){var n=o.a.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},l=function(e){var n=u(e.components);return o.a.createElement(p.Provider,{value:n},e.children)},m={inlineCode:"code",wrapper:function(e){var n=e.children;return o.a.createElement(o.a.Fragment,{},n)}},b=o.a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,a=e.originalType,c=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),l=u(t),b=r,f=l["".concat(c,".").concat(b)]||l[b]||m[b]||a;return t?o.a.createElement(f,i(i({ref:n},p),{},{components:t})):o.a.createElement(f,i({ref:n},p))}));function f(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var a=t.length,c=new Array(a);c[0]=b;var i={};for(var s in n)hasOwnProperty.call(n,s)&&(i[s]=n[s]);i.originalType=e,i.mdxType="string"==typeof e?e:r,c[1]=i;for(var p=2;p<a;p++)c[p]=t[p];return o.a.createElement.apply(null,c)}return o.a.createElement.apply(null,t)}b.displayName="MDXCreateElement"},80:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return a})),t.d(n,"metadata",(function(){return c})),t.d(n,"rightToc",(function(){return i})),t.d(n,"default",(function(){return p}));var r=t(3),o=(t(0),t(104));const a={},c={unversionedId:"objects/DaemonSet",id:"objects/DaemonSet",isDocsHomePage:!1,title:"DaemonSet",description:"DaemonSet",source:"@site/docs/objects/DaemonSet.md",slug:"/objects/DaemonSet",permalink:"/k8s-notes/objects/DaemonSet",editUrl:"https://github.com/jasonk/k8s-notes/edit/master/docs/objects/DaemonSet.md",version:"current"},i=[],s={rightToc:i};function p({components:e,...n}){return Object(o.b)("wrapper",Object(r.a)({},s,n,{components:e,mdxType:"MDXLayout"}),Object(o.b)("h1",{id:"daemonset"},"DaemonSet"),Object(o.b)("p",null,"A ",Object(o.b)("inlineCode",{parentName:"p"},"DaemonSet")," is a controller very similar to the ",Object(o.b)("inlineCode",{parentName:"p"},"Deployment"),'\ncontroller, but without the ability to specify the number of replicas.\nWhat a DaemonSet provides is a controller that allows you to say "run\nthis pod on every node in the cluster".  This makes it good for things\nlike monitoring exporters (such as ',Object(o.b)("inlineCode",{parentName:"p"},"NodeExporter"),") or log collectors."),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-yaml"}),'apiVersion: apps/v1\nkind: DaemonSet\nmetadata:\n  name: counter-app\nspec:\n  selector:\n    matchLabels:\n      app: counter\n  template:\n    metadata:\n      name: counter-app\n      labels:\n        app: counter\n    spec:\n      tolerations:\n      - effect: NoSchedule\n        operator: Exists\n      containers:\n      - name: counter\n        image: "kahootali/counter:1.0"\n        volumeMounts:\n        - name: counter\n          mountPath: /app/\n      volumes:\n      - name: counter\n        persistentVolumeClaim:\n          claimName: counter\n---\napiVersion: v1\nkind: PersistentVolumeClaim\nmetadata:\n  name: counter\nspec:\n  accessModes:\n  - ReadWriteMany\n  resources:\n    requests:\n      storage: 50Mi\n  storageClassName: efs\n')))}p.isMDXComponent=!0}}]);