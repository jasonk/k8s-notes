(window.webpackJsonp=window.webpackJsonp||[]).push([[10],{104:function(e,t,n){"use strict";n.d(t,"a",(function(){return u})),n.d(t,"b",(function(){return m}));var r=n(0),o=n.n(r);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=o.a.createContext({}),p=function(e){var t=o.a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},u=function(e){var t=p(e.components);return o.a.createElement(l.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return o.a.createElement(o.a.Fragment,{},t)}},f=o.a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,i=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),u=p(n),f=r,m=u["".concat(i,".").concat(f)]||u[f]||d[f]||a;return n?o.a.createElement(m,c(c({ref:t},l),{},{components:n})):o.a.createElement(m,c({ref:t},l))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,i=new Array(a);i[0]=f;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c.mdxType="string"==typeof e?e:r,i[1]=c;for(var l=2;l<a;l++)i[l]=n[l];return o.a.createElement.apply(null,i)}return o.a.createElement.apply(null,n)}f.displayName="MDXCreateElement"},76:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return a})),n.d(t,"metadata",(function(){return i})),n.d(t,"rightToc",(function(){return c})),n.d(t,"default",(function(){return l}));var r=n(3),o=(n(0),n(104));const a={title:"Taints and Tolerations"},i={unversionedId:"concepts/tainting",id:"concepts/tainting",isDocsHomePage:!1,title:"Taints and Tolerations",description:'A "taint" is a marking applied to a node that causes that node to',source:"@site/docs/concepts/tainting.md",slug:"/concepts/tainting",permalink:"/k8s-notes/concepts/tainting",editUrl:"https://github.com/jasonk/k8s-notes/edit/master/docs/concepts/tainting.md",version:"current",sidebar:"docs",previous:{title:"Operators",permalink:"/k8s-notes/concepts/operators"},next:{title:"ArgoCD",permalink:"/k8s-notes/apps/argocd"}},c=[],s={rightToc:c};function l({components:e,...t}){return Object(o.b)("wrapper",Object(r.a)({},s,t,{components:e,mdxType:"MDXLayout"}),Object(o.b)("p",null,'A "taint" is a marking applied to a node that causes that node to\nrepel pods that don\'t have a configuration indicating that they can\ntolerate that taint.'),Object(o.b)("p",null,"For example, the master node by default is tainted like this:"),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-yaml"}),"taints:\n  - effect: NoSchedule\n    key: node-role.kubernetes.io/master\n")),Object(o.b)("p",null,"The effect means that the scheduler is not allowed to schedule pods to\nrun on this node.  This is especially important to keep in mind in the\ncase of a [","[DaemonSet]","], because even though the daemon set is\nattempting to run a pod on every node, by default it can't start one\non the master node."),Object(o.b)("p",null,'If deploying something like a log collector or node monitor that you\ndo want to run on the master node, you need to add a "toleration" to\nthe spec of that manifest:'),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-yaml"}),"spec:\n  tolerations:\n    - effect: NoSchedule\n      operator: Exists\n")),Object(o.b)("p",null,"This indicates that the pods created by this spec can tolerate running\non a node that is tained by the existince of a NoSchedule effect."))}l.isMDXComponent=!0}}]);