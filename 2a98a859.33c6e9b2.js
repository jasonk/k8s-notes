(window.webpackJsonp=window.webpackJsonp||[]).push([[6],{104:function(e,t,n){"use strict";n.d(t,"a",(function(){return d})),n.d(t,"b",(function(){return m}));var o=n(0),r=n.n(o);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=r.a.createContext({}),u=function(e){var t=r.a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},d=function(e){var t=u(e.components);return r.a.createElement(s.Provider,{value:t},e.children)},b={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},p=r.a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,i=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),d=u(n),p=o,m=d["".concat(i,".").concat(p)]||d[p]||b[p]||a;return n?r.a.createElement(m,c(c({ref:t},s),{},{components:n})):r.a.createElement(m,c({ref:t},s))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=p;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c.mdxType="string"==typeof e?e:o,i[1]=c;for(var s=2;s<a;s++)i[s]=n[s];return r.a.createElement.apply(null,i)}return r.a.createElement.apply(null,n)}p.displayName="MDXCreateElement"},72:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return a})),n.d(t,"metadata",(function(){return i})),n.d(t,"rightToc",(function(){return c})),n.d(t,"default",(function(){return s}));var o=n(3),r=(n(0),n(104));const a={title:"Control Node"},i={unversionedId:"setup/control-node",id:"setup/control-node",isDocsHomePage:!1,title:"Control Node",description:"To get our control node running, we first need to setup some things in",source:"@site/docs/setup/control-node.md",slug:"/setup/control-node",permalink:"/k8s-notes/setup/control-node",editUrl:"https://github.com/jasonk/k8s-notes/edit/master/docs/setup/control-node.md",version:"current",sidebar:"docs",previous:{title:"Getting Started",permalink:"/k8s-notes/setup/getting-started"},next:{title:"Adding Worker Nodes",permalink:"/k8s-notes/setup/worker-nodes"}},c=[],l={rightToc:c};function s({components:e,...t}){return Object(r.b)("wrapper",Object(o.a)({},l,t,{components:e,mdxType:"MDXLayout"}),Object(r.b)("p",null,"To get our control node running, we first need to setup some things in\nthe base system."),Object(r.b)("p",null,"The containerd runtime we're going to use requires the ",Object(r.b)("inlineCode",{parentName:"p"},"overlay")," and\n",Object(r.b)("inlineCode",{parentName:"p"},"br_netfilter")," modules be loaded into the kernel.  We're going to\ncreate a ",Object(r.b)("inlineCode",{parentName:"p"},"modules-load")," entry to ensure they always get loaded on\nboot, but then we can also just load them manually for now."),Object(r.b)("pre",null,Object(r.b)("code",Object(o.a)({parentName:"pre"},{className:"language-sh"}),"cat <<END > /etc/modules-load.d/containerd.conf\noverlay\nbr_netfilter\nEND\nmodprobe overlay\nmodprobe br_netfilter\n")),Object(r.b)("p",null,"We also need to make sure that IP forwarding and some iptables\nbridging options are enabled in sysctl."),Object(r.b)("pre",null,Object(r.b)("code",Object(o.a)({parentName:"pre"},{className:"language-sh"}),"# Setup required sysctl params, these persist across reboots.\ncat <<END > /etc/sysctl.d/99-kubernetes-cri.conf\nnet.ipv4.ip_forward                 = 1\nnet.bridge.bridge-nf-call-iptables  = 1\nnet.bridge.bridge-nf-call-ip6tables = 1\nEND\nsysctl --system\n")),Object(r.b)("p",null,"Now we're going to start actually configuring things.  First we'll\ncreate a default configuration for ",Object(r.b)("inlineCode",{parentName:"p"},"containerd"),", which is easy because\nit can create one for us."),Object(r.b)("pre",null,Object(r.b)("code",Object(o.a)({parentName:"pre"},{className:"language-sh"}),"mkdir -p /etc/containerd\ncontainerd config default > /etc/containerd/config.toml\n")),Object(r.b)("p",null,"Next we'll create our base kubelet configuration and enable kubelet to\nstart on boot.  You might want to substitute your own DNS server\nsettings in place of the ones in the file, but the ones here should\nwork if you don't know what servers to use."),Object(r.b)("pre",null,Object(r.b)("code",Object(o.a)({parentName:"pre"},{className:"language-sh"}),"mkdir -p /var/lib/kubelet\ncat <<END > /var/lib/kubelet/config.yaml\napiVersion: kubelet.config.k8s.io/v1beta1\nkind: KubeletConfiguration\nclusterDns: [ 1.1.1.1, 8.8.8.8, 8.8.4.4 ]\nEND\nsystemctl enable kubelet\n")),Object(r.b)("p",null,"Next we need to configure systemd to pass the right options when it\nstarts containerd."),Object(r.b)("pre",null,Object(r.b)("code",Object(o.a)({parentName:"pre"},{}),'KUBELET_ARGS=(\n  --container-runtime=remote\n  --runtime-request-timeout=15m\n  --container-runtime-endpoint=unix:///run/containerd/containerd.sock\n)\nmkdir -p  /etc/systemd/system/kubelet.service.d/\ncat << END > /etc/systemd/system/kubelet.service.d/0-containerd.conf\n[Service]\nEnvironment="KUBELET_EXTRA_ARGS=${KUBELET_ARGS[*]}"\nEND\n')),Object(r.b)("p",null,"Now we're ready to actually start up the cluster.  Start by using\n",Object(r.b)("inlineCode",{parentName:"p"},"kubeadm")," to pull down the images that it's going to use, which will\nsave some time later, then you can initialize the cluster.  Make sure\nto replace the values of the ",Object(r.b)("inlineCode",{parentName:"p"},"control-plane-endpoint")," and\n",Object(r.b)("inlineCode",{parentName:"p"},"pod-network-cidr")," options if you decided to use different values that\nwhat we're using."),Object(r.b)("pre",null,Object(r.b)("code",Object(o.a)({parentName:"pre"},{className:"language-sh"}),"kubeadm config images pull\nkubeadm init --config=/var/lib/kubelet/config.yaml --upload-certs \\\n  --control-plane-endpoint=cluster.local\n  --pod-network-cidr=10.244.0.0/16 \\\n  --cri-socket /run/containerd/containerd.sock\n")),Object(r.b)("p",null,"Your cluster should now be online.  If you are only going to have\na single node for now, or you just want to be able to run pods on your\ncontrol node, then you can remove the ",Object(r.b)("inlineCode",{parentName:"p"},"master"),' taint from it.  This\n"taint" is what normally keeps pods from being scheduled onto the\nmaster node.'),Object(r.b)("pre",null,Object(r.b)("code",Object(o.a)({parentName:"pre"},{}),"kubectl taint nodes --all node-role.kubernetes.io/master-\n")),Object(r.b)("p",null,"Note that when you run ",Object(r.b)("inlineCode",{parentName:"p"},"kubeadm init")," it will give you a command line\nyou can use to join other nodes to the cluster.  That process is\na little easier if you record that command somewhere safe, but I'll\nshow you how to reproduce it if you need to also."))}s.isMDXComponent=!0}}]);