(window.webpackJsonp=window.webpackJsonp||[]).push([[21],{104:function(e,t,n){"use strict";n.d(t,"a",(function(){return u})),n.d(t,"b",(function(){return h}));var o=n(0),a=n.n(o);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,o,a=function(e,t){if(null==e)return{};var n,o,a={},r=Object.keys(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=a.a.createContext({}),p=function(e){var t=a.a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=p(e.components);return a.a.createElement(c.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},d=a.a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),u=p(n),d=o,h=u["".concat(l,".").concat(d)]||u[d]||m[d]||r;return n?a.a.createElement(h,i(i({ref:t},c),{},{components:n})):a.a.createElement(h,i({ref:t},c))}));function h(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,l=new Array(r);l[0]=d;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:o,l[1]=i;for(var c=2;c<r;c++)l[c]=n[c];return a.a.createElement.apply(null,l)}return a.a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},87:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return r})),n.d(t,"metadata",(function(){return l})),n.d(t,"rightToc",(function(){return i})),n.d(t,"default",(function(){return c}));var o=n(3),a=(n(0),n(104));const r={},l={unversionedId:"objects/Deployment",id:"objects/Deployment",isDocsHomePage:!1,title:"Deployment",description:"Deployment",source:"@site/docs/objects/Deployment.md",slug:"/objects/Deployment",permalink:"/k8s-notes/objects/Deployment",editUrl:"https://github.com/jasonk/k8s-notes/edit/master/docs/objects/Deployment.md",version:"current"},i=[],s={rightToc:i};function c({components:e,...t}){return Object(a.b)("wrapper",Object(o.a)({},s,t,{components:e,mdxType:"MDXLayout"}),Object(a.b)("h1",{id:"deployment"},"Deployment"),Object(a.b)("p",null,"A ",Object(a.b)("inlineCode",{parentName:"p"},"Deployment")," is a collection of pods defined by a template.  For the\nsimplest deployments all you need to configure is some metadata about\nwhich pods it should contain and how many instances of each pod should\nbe available."),Object(a.b)("p",null,"When this is deployed, the deployment will create a ReplicaSet which\nthen creates the required number of Pods.  When you update the\napplication, the default update strategy is a RollingUpdate, so during\nthe update a new ReplicaSet will be created for the new version of the\napplication, and then as Pods are successfully started in that new\nReplicaSet, the previous ReplicaSet will scale down until you've\nmigrated completely to the new version."),Object(a.b)("pre",null,Object(a.b)("code",Object(o.a)({parentName:"pre"},{className:"language-yaml"}),"---\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: hello-world\n  labels:\n    app: hello-world\nspec:\n  # How many pods should be running\n  replicas: 10\n  # How do we find pods that belong to this deployment?  The\n  # deployment uses the matchLabels to determine which pods are part\n  # of this deployment.\n  selector: { matchLabels: { app: hello-world } }\n  # The template defines what the pods in the deployment look like.\n  template:\n    # The labels in this metadata block get applied to all of the\n    # launched pods, they match the labels in the selector above so\n    # that all of the pods created from this deployment will be\n    # associated with it.\n    metadata: { labels: { app: hello-world } }\n    # The spec defines what containers should be running the pods\n    spec:\n      containers:\n        - name: hello-world-rest-server\n          image: hellow-world-api:1.0\n          ports:\n            - containerPort: 80\n")),Object(a.b)("p",null,"Deployments are best suited for stateless applications, where pods can\nbe replaced at any time without breaking things, but you can get\na persistent volume if your application needs to store some state."),Object(a.b)("pre",null,Object(a.b)("code",Object(o.a)({parentName:"pre"},{className:"language-yaml"}),'---\napiVersion: apps/v1beta1\nkind: Deployment\nmetadata: { name: counter }\nspec:\n  replicas: 1\n  template: { metadata: { labels: { app: counter } } }\n    spec:\n      containers:\n      - name: counter\n        image: "kahootali/counter:1.0"\n        volumeMounts:\n        # The name in the volumeMount refers to the name of the volume\n        # in the following `volumes` section.\n        - name: counter\n          mountPath: /app/\n      volumes:\n      - name: counter\n        persistentVolumeClaim:\n          # This claimName refers to the metadata.name in the\n          # PersistentVolumeClaim defined in the next section\n          claimName: counter\n---\napiVersion: v1\nkind: PersistentVolumeClaim\nmetadata: { name: counter }\nspec:\n  accessModes: [ ReadWriteMany ]\n  resources:\n    # This is how the size of this persistent volume is determined\n    requests:\n      storage: 50Mi\n  storageClassName: default\n')),Object(a.b)("p",null,"In this example, the persistent volume is mounted read/write on every\npod in the deployment."))}c.isMDXComponent=!0}}]);