(window.webpackJsonp=window.webpackJsonp||[]).push([[33],{104:function(e,t,n){"use strict";n.d(t,"a",(function(){return p})),n.d(t,"b",(function(){return m}));var r=n(0),a=n.n(r);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function c(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?c(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):c(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=a.a.createContext({}),u=function(e){var t=a.a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=u(e.components);return a.a.createElement(l.Provider,{value:t},e.children)},f={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},d=a.a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,c=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),p=u(n),d=r,m=p["".concat(c,".").concat(d)]||p[d]||f[d]||o;return n?a.a.createElement(m,i(i({ref:t},l),{},{components:n})):a.a.createElement(m,i({ref:t},l))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,c=new Array(o);c[0]=d;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:r,c[1]=i;for(var l=2;l<o;l++)c[l]=n[l];return a.a.createElement.apply(null,c)}return a.a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},99:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return o})),n.d(t,"metadata",(function(){return c})),n.d(t,"rightToc",(function(){return i})),n.d(t,"default",(function(){return l}));var r=n(3),a=(n(0),n(104));const o={},c={unversionedId:"objects/StatefulSet",id:"objects/StatefulSet",isDocsHomePage:!1,title:"StatefulSet",description:"StatefulSet",source:"@site/docs/objects/StatefulSet.md",slug:"/objects/StatefulSet",permalink:"/k8s-notes/objects/StatefulSet",editUrl:"https://github.com/jasonk/k8s-notes/edit/master/docs/objects/StatefulSet.md",version:"current"},i=[],s={rightToc:i};function l({components:e,...t}){return Object(a.b)("wrapper",Object(r.a)({},s,t,{components:e,mdxType:"MDXLayout"}),Object(a.b)("h1",{id:"statefulset"},"StatefulSet"),Object(a.b)("p",null,"A ",Object(a.b)("inlineCode",{parentName:"p"},"StatefulSet")," is a controller used to manage stateful applications.\nIt manages the deployment and scaling of a set of these Pods and\nprovides guarantees about the ordering and uniqueness of the Pods."),Object(a.b)("p",null,"A StatefulSet doesn't create a ReplicaSet controller like a Deployment\ndoes, it manages the replicas itself, giving the pods suffixed names\n(a deployment named ",Object(a.b)("inlineCode",{parentName:"p"},"db")," would gets pods named ",Object(a.b)("inlineCode",{parentName:"p"},"db-0"),", ",Object(a.b)("inlineCode",{parentName:"p"},"db-1"),", ",Object(a.b)("inlineCode",{parentName:"p"},"db-2"),",\netc)."),Object(a.b)("p",null,"Every replica of a StatefulSet will have it's own state, and each of\nthe pods will create it's own PVC (PersistenVolumeClaim)."),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-yaml"}),'apiVersion: apps/v1\nkind: StatefulSet\nmetadata: { name: counter }\nspec:\n  serviceName: "counter-app"\n  selector: { matchLabels: { app: counter } }\n  replicas: 1\n  template:\n    metadata: { labels: { app: counter } }\n    spec:\n      containers:\n      - name: counter\n        image: "kahootali/counter:1.0"\n        volumeMounts:\n        - name: counter\n          mountPath: /app/\n  volumeClaimTemplates:\n  - metadata: { name: counter }\n    spec:\n      accessModes: [ "ReadWriteMany" ]\n      storageClassName: efs\n      resources: { requests: { storage: 50Mi } }\n')))}l.isMDXComponent=!0}}]);